{"version":3,"sources":["logo.svg","components/AddToDoForm.js","components/Header.js","components/ToDo.js","components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AddToDoForm","_todo","onNewToDo","f","className","onSubmit","e","preventDefault","value","focus","ref","input","type","placeholder","required","propTypes","PropTypes","func","Header","src","logo","alt","ToDo","todo","onRemove","onClick","ToDoList","todos","length","map","key","id","App","props","state","v4","addToDo","bind","removeToDo","this","setState","filter","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,kC,mUCuC5BC,G,MA9BK,SAAC,GAA4B,IAC3CC,EAD0C,IAAzBC,iBAAyB,MAAb,SAAAC,GAAC,OAAIA,GAAQ,EAU9C,OACE,yBAAKC,UAAU,2BACb,0BAAMA,UAAU,gBAAgBC,SATrB,SAAAC,GACbA,EAAEC,iBACFL,EAAUD,EAAMO,OAChBP,EAAMO,MAAQ,GACdP,EAAMQ,UAMF,2BACEC,IAAK,SAAAC,GAAK,OAAKV,EAAQU,GACvBC,KAAK,OACLC,YAAY,kBACZC,UAAQ,IAEV,yC,iBCRRd,EAAYe,UAAY,CACtBb,UAAWc,IAAUC,MAGRC,MAbA,SAAC,GAAD,QAAGhB,iBAAH,MAAe,SAAAC,GAAC,OAAIA,GAApB,SACb,4BAAQC,UAAU,cAChB,yBAAKe,IAAKC,IAAMhB,UAAU,WAAWiB,IAAI,SACzC,2CACA,kBAAC,EAAD,CAAanB,UAAWA,MCOboB,G,YAbF,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,IAASC,gBAAT,MAAoB,SAAArB,GAAC,OAAIA,GAAzB,SACX,6BAASC,UAAU,wBACjB,4BAAQqB,QAASD,GAAjB,KACA,2BAAID,MCiBOG,EAlBE,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,IAAUH,gBAAV,MAAqB,SAAArB,GAAC,OAAIA,GAA1B,SACf,yBAAKC,UAAU,aACK,IAAjBuB,EAAMC,OACL,uBAAGxB,UAAU,YAAb,oCAEAuB,EAAME,KAAI,SAAAN,GAAI,OACZ,kBAAC,EAAD,eAAMO,IAAKP,EAAKQ,IAAQR,EAAxB,CAA8BC,SAAU,kBAAMA,EAASD,EAAKQ,aCA/CC,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXP,MAAO,CACL,CACEI,GAAII,eACJZ,KAAM,gBAIZ,EAAKa,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAXD,E,qEAcXd,GACN,IAAMI,EAAK,sBACNY,KAAKL,MAAMP,OADL,CAET,CACEI,GAAII,eACJZ,UAGJgB,KAAKC,SAAS,CAAEb,Y,iCAGPI,GACT,IAAMJ,EAAQY,KAAKL,MAAMP,MAAMc,QAAO,SAAAlB,GAAI,OAAIA,EAAKQ,KAAOA,KAC1DQ,KAAKC,SAAS,CAAEb,Y,+BAGR,IACAS,EAAwBG,KAAxBH,QAASE,EAAeC,KAAfD,WACTX,EAAUY,KAAKL,MAAfP,MACR,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,CAAQF,UAAWkC,IACnB,kBAAC,EAAD,CAAUT,MAAOA,EAAOH,SAAUc,S,GArCTI,aCLbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1cc42f38.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"../css/AddToDoForm.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/*\r\n * This stateless functional component displays a form for the user to\r\n * enter new todo's.  The new todo is sent up the tree using the \"onNewToDo\"\r\n * callback function property.\r\n */\r\nconst AddToDoForm = ({ onNewToDo = f => f }) => {\r\n  let _todo;\r\n\r\n  const submit = e => {\r\n    e.preventDefault();\r\n    onNewToDo(_todo.value);\r\n    _todo.value = \"\";\r\n    _todo.focus();\r\n  };\r\n\r\n  return (\r\n    <div className=\"add-todo-form-container\">\r\n      <form className=\"add-todo-form\" onSubmit={submit}>\r\n        <input\r\n          ref={input => (_todo = input)} // save ref to local variable\r\n          type=\"text\"\r\n          placeholder=\"Add new todo...\"\r\n          required\r\n        />\r\n        <button>+</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Typechecking with PropTypes\r\nAddToDoForm.propTypes = {\r\n  onNewToDo: PropTypes.func\r\n};\r\n\r\nexport default AddToDoForm;\r\n","import React from \"react\";\r\nimport \"../css/Header.css\";\r\nimport logo from \"../logo.svg\";\r\nimport AddToDoForm from \"./AddToDoForm.js\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/*\r\n * The app header and user input form are displayed together in this stateless functional\r\n * component.  The \"onNewToDo\" callback function property simply passes data from the\r\n * form component up the tree for use in <App /> where state is managed.\r\n */\r\nconst Header = ({ onNewToDo = f => f }) => (\r\n  <header className=\"App-header\">\r\n    <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n    <h1>React To-Do</h1>\r\n    <AddToDoForm onNewToDo={onNewToDo} />\r\n  </header>\r\n);\r\n\r\n// Typechecking with PropTypes\r\nAddToDoForm.propTypes = {\r\n  onNewToDo: PropTypes.func\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"../css/ToDo.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/*\r\n * A stateless functional component that displays each to-do item.  The object property \"todo\"\r\n * is available by use of JSX spread operator in parent component.  The \"onRemove\" callback function\r\n * property passes the button click event to remove this todo up the tree.\r\n */\r\nconst ToDo = ({ todo, onRemove = f => f }) => (\r\n  <section className=\"todo-entry-container\">\r\n    <button onClick={onRemove}>x</button>\r\n    <p>{todo}</p>\r\n  </section>\r\n);\r\n\r\n// Typechecking with PropTypes\r\nToDo.propTypes = {\r\n  todo: PropTypes.string,\r\n  onRemove: PropTypes.func\r\n};\r\n\r\nexport default ToDo;\r\n","import React from \"react\";\r\nimport \"../css/ToDoList.css\";\r\nimport ToDo from \"./ToDo.js\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/*\r\n * This stateless functional component is responsible for displaying all\r\n * of the todo's, or a default message if there aren't any.  The \"todos\" prop contains\r\n * the array of all to-do's passed down from <App />.  The \"onRemove\" callback\r\n * function property passes relevant event data from <ToDo /> up the tree to <App />.\r\n */\r\nconst ToDoList = ({ todos, onRemove = f => f }) => (\r\n  <div className=\"todo-list\">\r\n    {todos.length === 0 ? (\r\n      <p className=\"no-todos\">No To-Do's Listed. (Add a To-Do)</p>\r\n    ) : (\r\n      todos.map(todo => (\r\n        <ToDo key={todo.id} {...todo} onRemove={() => onRemove(todo.id)} />\r\n      ))\r\n    )}\r\n  </div>\r\n);\r\n\r\n// Typechecking with PropTypes\r\nToDoList.propTypes = {\r\n  todos: PropTypes.array,\r\n  onRemove: PropTypes.func\r\n};\r\n\r\nexport default ToDoList;\r\n","import React from \"react\";\r\nimport { Component } from \"react\";\r\nimport { v4 } from \"uuid\";\r\nimport \"./css/App.css\";\r\nimport Header from \"./components/Header.js\";\r\nimport ToDoList from \"./components/ToDoList.js\";\r\n\r\n/*\r\n * Root application ES6 component class with constructor and custom methods.  All application\r\n * state managed here.\r\n *\r\n * <Header /> contains the user input form for new todos and invokes addToDo()\r\n * using a callback function property when the form is submitted.\r\n *\r\n * <ToDoList /> recieves the full todos array with prop \"todos\", and invokes removeToDo()\r\n * when the callback function property \"onRemove\" is activated by the remove todo button event.\r\n */\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      todos: [\r\n        {\r\n          id: v4(), // unique id generated with uuid npm package, v4() is for random based identifer\r\n          todo: \"Add a todo\"\r\n        }\r\n      ]\r\n    };\r\n    this.addToDo = this.addToDo.bind(this);\r\n    this.removeToDo = this.removeToDo.bind(this);\r\n  }\r\n\r\n  addToDo(todo) {\r\n    const todos = [\r\n      ...this.state.todos,\r\n      {\r\n        id: v4(),\r\n        todo\r\n      }\r\n    ];\r\n    this.setState({ todos });\r\n  }\r\n\r\n  removeToDo(id) {\r\n    const todos = this.state.todos.filter(todo => todo.id !== id);\r\n    this.setState({ todos });\r\n  }\r\n\r\n  render() {\r\n    const { addToDo, removeToDo } = this;\r\n    const { todos } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <Header onNewToDo={addToDo} />\r\n        <ToDoList todos={todos} onRemove={removeToDo} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}